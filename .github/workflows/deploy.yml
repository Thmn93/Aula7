name: CI / CD

on:
  # O workflow vai rodar em pushes para as branches principais
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'hotfix/**'
  # E também em pull requests abertos para a main e develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # fetch-depth: 0 é essencial para ler todo o histórico de commits para o versionamento
          fetch-depth: 0

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalar Dependências
        run: npm ci

      - name: Instalar Semver
        run: npm install -g semver

      - name: Executar Build
        run: npm run build

      - name: Executar Testes
        run: npm test -- --coverage

      - name: Calcular nova versão com base nos commits
        id: version
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force --prune
          
          # 1) Descobre a última tag semântica
          LAST_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1 || true)
          if [ -z "${LAST_TAG:-}" ]; then
            LAST_TAG="v0.0.0"
          fi
          echo "Última tag: $LAST_TAG"
          
          CURRENT_VERSION="${LAST_TAG#v}"
          
          # 2) Coleta as mensagens de commit desde a última tag
          LOG_RANGE="${LAST_TAG}..HEAD"
          mapfile -t COMMITS < <(git log ${LOG_RANGE} --pretty=format:'%s' || true)
          echo "Commits desde ${LAST_TAG}:"
          printf ' - %s\n' "${COMMITS[@]:-<nenhum>}"
          
          # 3) Detecta o nível de mudança (MAJOR, MINOR, PATCH)
          MAJOR=0; MINOR=0; PATCH=0
          for COMMIT in "${COMMITS[@]:-}"; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT" == *"!:"* ]]; then
              MAJOR=1
            elif [[ "$COMMIT" == "feat"* ]]; then
              MINOR=1
            elif [[ "$COMMIT" == "fix"* ]]; then
              PATCH=1
            fi
          done
          
          # 4) Calcula a nova versão
          NEW_VERSION="$CURRENT_VERSION"
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major "$CURRENT_VERSION")
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor "$CURRENT_VERSION")
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch "$CURRENT_VERSION")
          fi
          
          echo "Versões (atual -> nova): $CURRENT_VERSION -> $NEW_VERSION"
          
          # 5) Exporta os resultados para os próximos passos
          if [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
            echo "should_deploy=false" >> "$GITHUB_OUTPUT"
          else
            echo "should_deploy=true" >> "$GITHUB_OUTPUT"
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_ENV"
          fi

      # As 3 etapas seguintes (atualizar, commitar e push) SÓ RODAM se houver uma nova versão E se o push for na branch 'develop'
      - name: Atualizar versão no package.json
        if: steps.version.outputs.should_deploy == 'true' && github.ref == 'refs/heads/develop'
        run: |
          npm version "${{ env.NEW_VERSION }}" --no-git-tag-version

      - name: Fazer commit da nova versão
        if: steps.version.outputs.should_deploy == 'true' && github.ref == 'refs/heads/develop'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore(release): version ${{ env.NEW_VERSION }}"
          git tag "v${{ env.NEW_VERSION }}"

      - name: Fazer push do commit e da tag
        if: steps.version.outputs.should_deploy == 'true' && github.ref == 'refs/heads/develop'
        run: |
          git push
          git push origin "v${{ env.NEW_VERSION }}"

      # Passo de envio de e-mail unificado e corrigido
      - name: Enviar email em caso de falha
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          # Configuração padrão para o Gmail
          server_address: smtp.gmail.com
          server_port: 465
          
          # Use os secrets do repositório para segurança (padronizado para MAIL_*)
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          
          # Detalhes do e-mail
          subject: 'Falha no pipeline Actions do repositório: ${{ github.repository }}'
          to: fe.dsm.vot.001@gmail.com
          from: GitHub Actions <${{ secrets.MAIL_USERNAME }}>
          body: |
            A execução do workflow falhou.
            Repositório: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            Veja os logs aqui: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}